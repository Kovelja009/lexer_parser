// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: spec.flex

// import section
package Lexer;
import Parser.sym;
import java_cup.runtime.*;
import Lexer.KWTable.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MPLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\3\4"+
    "\1\5\1\6\1\4\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\11\21\1\4\1\22"+
    "\5\4\4\23\1\24\1\23\24\25\4\4\1\26\1\4"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\25\1\41\1\42\1\43\1\44\2\25"+
    "\1\45\1\46\1\47\1\50\1\51\4\25\1\52\1\0"+
    "\1\53\1\4\6\0\1\3\67\0\1\4\1\0\1\4"+
    "\57\0\1\4\u0138\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\2\13\1\14\12\15"+
    "\1\16\1\17\1\1\1\2\1\20\1\0\1\1\1\3"+
    "\1\1\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\2\13\1\14\12\15\1\16\1\17\1\13\2\0\1\13"+
    "\1\21\1\0\11\22\1\23\1\13\1\0\1\20\1\0"+
    "\1\13\1\21\1\0\11\22\1\23\2\13\1\24\3\22"+
    "\1\15\3\22\2\13\1\24\3\22\1\15\3\22\1\0"+
    "\6\22\1\15\1\0\6\22\1\15\1\0\1\25\1\22"+
    "\1\26\2\22\1\27\1\22\1\0\1\25\1\22\1\26"+
    "\2\22\1\27\11\22\1\30\1\15\1\31\1\22\1\30"+
    "\1\15\1\31\12\22\1\15\1\22\1\15\4\22\1\32"+
    "\1\33\1\32\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\130\0\204\0\130\0\260\0\130"+
    "\0\130\0\130\0\130\0\130\0\130\0\334\0\u0108\0\u0134"+
    "\0\130\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\130\0\130\0\u0318\0\u0318\0\130"+
    "\0\u0318\0\u0344\0\u0318\0\u0370\0\u0318\0\u0318\0\u0318\0\u0318"+
    "\0\u0318\0\u0318\0\u039c\0\u03c8\0\u03f4\0\u0318\0\u0420\0\u044c"+
    "\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac"+
    "\0\u0318\0\u0318\0\204\0\u05d8\0\u0604\0\u0604\0\130\0\u0630"+
    "\0\u0160\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u0160\0\u0344\0\u07bc\0\u05d8\0\u07e8\0\u07e8\0\u0318"+
    "\0\u0814\0\u0420\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\u0420\0\130\0\u09a0\0\u0160\0\u09cc\0\u09f8"+
    "\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0318\0\u0b00\0\u0420"+
    "\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60"+
    "\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0"+
    "\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0134"+
    "\0\u0160\0\u0f20\0\u0160\0\u0f4c\0\u0f78\0\u0160\0\u0fa4\0\u03f4"+
    "\0\u0420\0\u0fd0\0\u0420\0\u0ffc\0\u1028\0\u0420\0\u1054\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u0160"+
    "\0\u11e0\0\u0160\0\u120c\0\u0420\0\u1238\0\u0420\0\u1264\0\u1290"+
    "\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0"+
    "\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u0160"+
    "\0\u0160\0\u0420\0\u0420";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\1\20\1\21\3\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\22\1\30\3\22\1\31\1\32\2\22\1\33\5\22"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\36\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\36\1\53\1\54\1\55\1\56\3\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\57\1\65\3\57\1\66\1\67"+
    "\2\57\1\70\5\57\1\71\1\72\74\0\2\73\1\0"+
    "\2\73\27\0\4\74\3\75\1\76\44\75\17\0\1\77"+
    "\52\0\1\100\1\0\2\20\52\0\2\20\52\0\2\23"+
    "\1\0\3\101\1\22\23\101\22\0\2\23\1\0\27\23"+
    "\22\0\2\23\1\0\3\101\1\22\14\101\1\102\6\101"+
    "\22\0\2\23\1\0\3\101\1\22\12\101\1\103\10\101"+
    "\22\0\2\23\1\0\3\101\1\22\15\101\1\104\3\101"+
    "\1\105\1\101\22\0\2\23\1\0\3\101\1\22\15\101"+
    "\1\106\5\101\22\0\2\23\1\0\3\101\1\22\15\101"+
    "\1\107\5\101\22\0\2\23\1\0\3\101\1\22\21\101"+
    "\1\110\1\101\22\0\2\23\1\0\3\101\1\22\4\101"+
    "\1\111\16\101\22\0\2\23\1\0\3\101\1\22\16\101"+
    "\1\112\4\101\2\0\2\41\1\40\53\41\1\40\15\41"+
    "\2\113\1\41\2\113\27\41\2\114\1\115\1\114\3\116"+
    "\1\117\44\116\2\41\1\40\14\41\1\120\36\41\1\40"+
    "\13\41\1\121\1\41\2\55\34\41\1\40\15\41\2\55"+
    "\34\41\1\40\15\41\2\60\1\41\3\122\1\57\23\122"+
    "\4\41\1\40\15\41\2\60\1\41\27\60\4\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\14\122\1\123\6\122"+
    "\4\41\1\40\15\41\2\60\1\41\3\122\1\57\12\122"+
    "\1\124\10\122\4\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\15\122\1\125\3\122\1\126\1\122\4\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\15\122\1\127\5\122"+
    "\4\41\1\40\15\41\2\60\1\41\3\122\1\57\15\122"+
    "\1\130\5\122\4\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\21\122\1\131\1\122\4\41\1\40\15\41\2\60"+
    "\1\41\3\122\1\57\4\122\1\132\16\122\4\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\16\122\1\133\4\122"+
    "\2\41\7\0\1\134\50\0\3\75\1\76\44\75\20\0"+
    "\2\135\52\0\2\23\1\0\3\101\1\22\3\101\1\136"+
    "\17\101\22\0\2\23\1\0\3\101\1\22\4\101\1\137"+
    "\16\101\22\0\2\23\1\0\3\101\1\22\14\101\1\140"+
    "\6\101\22\0\2\23\1\0\3\101\1\22\16\101\1\141"+
    "\4\101\22\0\2\23\1\0\3\101\1\142\23\101\22\0"+
    "\2\23\1\0\3\101\1\22\16\101\1\143\4\101\22\0"+
    "\2\23\1\0\3\101\1\22\3\101\1\144\17\101\22\0"+
    "\2\23\1\0\3\101\1\22\20\101\1\145\2\101\2\0"+
    "\2\41\1\40\4\41\1\146\46\41\1\40\1\41\3\116"+
    "\1\117\44\116\2\41\1\40\15\41\2\147\34\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\3\122\1\150\17\122"+
    "\4\41\1\40\15\41\2\60\1\41\3\122\1\57\4\122"+
    "\1\151\16\122\4\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\14\122\1\152\6\122\4\41\1\40\15\41\2\60"+
    "\1\41\3\122\1\57\16\122\1\153\4\122\4\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\154\23\122\4\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\16\122\1\155\4\122"+
    "\4\41\1\40\15\41\2\60\1\41\3\122\1\57\3\122"+
    "\1\156\17\122\4\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\20\122\1\157\2\122\2\41\20\0\2\135\2\0"+
    "\1\160\47\0\2\23\1\0\3\101\1\22\17\101\1\161"+
    "\3\101\22\0\2\23\1\0\3\101\1\22\3\101\1\162"+
    "\17\101\22\0\2\23\1\0\3\101\1\22\17\101\1\163"+
    "\3\101\22\0\2\23\1\0\3\101\1\22\14\101\1\164"+
    "\6\101\22\0\2\23\1\0\3\101\1\22\6\101\1\165"+
    "\14\101\22\0\2\23\1\0\3\101\1\22\6\101\1\166"+
    "\14\101\22\0\2\23\1\0\3\101\1\167\23\101\2\0"+
    "\2\41\1\40\15\41\2\147\2\41\1\170\31\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\17\122\1\171\3\122"+
    "\4\41\1\40\15\41\2\60\1\41\3\122\1\57\3\122"+
    "\1\172\17\122\4\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\17\122\1\173\3\122\4\41\1\40\15\41\2\60"+
    "\1\41\3\122\1\57\14\122\1\174\6\122\4\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\6\122\1\175\14\122"+
    "\4\41\1\40\15\41\2\60\1\41\3\122\1\57\6\122"+
    "\1\176\14\122\4\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\177\23\122\2\41\13\0\1\200\1\0\1\200\56\0"+
    "\2\23\1\0\3\101\1\22\17\101\1\201\3\101\22\0"+
    "\2\23\1\0\3\101\1\22\4\101\1\202\16\101\22\0"+
    "\2\23\1\0\3\101\1\22\4\101\1\203\16\101\22\0"+
    "\2\23\1\0\3\101\1\22\15\101\1\204\5\101\22\0"+
    "\2\23\1\0\3\101\1\22\10\101\1\205\12\101\22\0"+
    "\2\23\1\0\3\101\1\22\4\101\1\206\16\101\22\0"+
    "\2\23\1\0\3\101\1\22\20\101\1\207\2\101\2\0"+
    "\2\41\1\40\10\41\1\210\1\41\1\210\40\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\17\122\1\211\3\122"+
    "\4\41\1\40\15\41\2\60\1\41\3\122\1\57\4\122"+
    "\1\212\16\122\4\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\4\122\1\213\16\122\4\41\1\40\15\41\2\60"+
    "\1\41\3\122\1\57\15\122\1\214\5\122\4\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\10\122\1\215\12\122"+
    "\4\41\1\40\15\41\2\60\1\41\3\122\1\57\4\122"+
    "\1\216\16\122\4\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\20\122\1\217\2\122\2\41\20\0\2\23\1\0"+
    "\3\101\1\22\13\101\1\220\7\101\22\0\2\23\1\0"+
    "\3\101\1\22\20\101\1\221\2\101\22\0\2\23\1\0"+
    "\3\101\1\22\22\101\1\222\22\0\2\23\1\0\3\101"+
    "\1\22\7\101\1\223\13\101\2\0\2\41\1\40\15\41"+
    "\2\60\1\41\3\122\1\57\13\122\1\224\7\122\4\41"+
    "\1\40\15\41\2\60\1\41\3\122\1\57\20\122\1\225"+
    "\2\122\4\41\1\40\15\41\2\60\1\41\3\122\1\57"+
    "\22\122\1\226\4\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\7\122\1\227\13\122\2\41\20\0\2\23\1\0"+
    "\3\101\1\22\14\101\1\230\6\101\22\0\2\23\1\0"+
    "\3\101\1\231\23\101\22\0\2\23\1\0\3\101\1\22"+
    "\4\101\1\232\16\101\22\0\2\23\1\0\3\101\1\22"+
    "\4\101\1\233\16\101\2\0\2\41\1\40\15\41\2\60"+
    "\1\41\3\122\1\57\14\122\1\234\6\122\4\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\235\23\122\4\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\4\122\1\236\16\122"+
    "\4\41\1\40\15\41\2\60\1\41\3\122\1\57\4\122"+
    "\1\237\16\122\2\41\20\0\2\23\1\0\3\101\1\22"+
    "\11\101\1\240\11\101\22\0\2\23\1\0\3\101\1\22"+
    "\16\101\1\241\4\101\2\0\2\41\1\40\15\41\2\60"+
    "\1\41\3\122\1\57\11\122\1\242\11\122\4\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\16\122\1\243\4\122"+
    "\2\41\20\0\2\23\1\0\3\101\1\22\21\101\1\244"+
    "\1\101\22\0\2\23\1\0\3\101\1\22\4\101\1\245"+
    "\16\101\2\0\2\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\21\122\1\246\1\122\4\41\1\40\15\41\2\60"+
    "\1\41\3\122\1\57\4\122\1\247\16\122\2\41\20\0"+
    "\2\23\1\0\3\101\1\22\3\101\1\250\17\101\22\0"+
    "\2\23\1\0\3\101\1\251\23\101\2\0\2\41\1\40"+
    "\15\41\2\60\1\41\3\122\1\57\3\122\1\252\17\122"+
    "\4\41\1\40\15\41\2\60\1\41\3\122\1\253\23\122"+
    "\2\41\20\0\2\23\1\0\3\101\1\22\6\101\1\254"+
    "\14\101\22\0\2\23\1\0\3\101\1\22\1\101\1\255"+
    "\21\101\2\0\2\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\6\122\1\256\14\122\4\41\1\40\15\41\2\60"+
    "\1\41\3\122\1\57\1\122\1\257\21\122\2\41\20\0"+
    "\2\23\1\0\3\101\1\22\4\101\1\260\16\101\22\0"+
    "\2\23\1\0\3\101\1\22\4\101\1\261\16\101\2\0"+
    "\2\41\1\40\15\41\2\60\1\41\3\122\1\57\4\122"+
    "\1\262\16\122\4\41\1\40\15\41\2\60\1\41\3\122"+
    "\1\57\4\122\1\263\16\122\2\41";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\1\1\6\11\3\1\1\11"+
    "\12\1\2\11\2\1\1\11\1\0\32\1\2\0\1\1"+
    "\1\11\1\0\13\1\1\0\1\1\1\0\2\1\1\0"+
    "\12\1\1\11\23\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
   public int getLine()
   {
      return yyline;
   }
//extra class members
KWTable kwTable = new KWTable();
Symbol getKW()
{
return new Symbol( kwTable.find( yytext()) );

}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MPLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new Symbol( sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { if (yytext() != null && yytext().length() > 0) System.out.println( \"ERROR: \" + yytext() ); }");
            { if (yytext() != null && yytext().length() > 0) System.out.println( "ERROR: " + yytext() );
            }
            // fall through
          case 28: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [47] { ; }");
            { ;
            }
            // fall through
          case 29: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [56] { return new Symbol( sym.MOD ); }");
            { return new Symbol( sym.MOD );
            }
            // fall through
          case 30: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [48] { return new Symbol( sym.LP ); }");
            { return new Symbol( sym.LP );
            }
            // fall through
          case 31: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [49] { return new Symbol( sym.RP ); }");
            { return new Symbol( sym.RP );
            }
            // fall through
          case 32: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [58] { return new Symbol( sym.MUL ); }");
            { return new Symbol( sym.MUL );
            }
            // fall through
          case 33: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [57] { return new Symbol( sym.PLUS ); }");
            { return new Symbol( sym.PLUS );
            }
            // fall through
          case 34: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { return new Symbol( sym.COMMA ); }");
            { return new Symbol( sym.COMMA );
            }
            // fall through
          case 35: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { return new Symbol( sym.MIN ); }");
            { return new Symbol( sym.MIN );
            }
            // fall through
          case 36: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [60] { return new Symbol( sym.DIV ); }");
            { return new Symbol( sym.DIV );
            }
            // fall through
          case 37: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return new Symbol( sym.CONST ); }");
            { return new Symbol( sym.CONST );
            }
            // fall through
          case 38: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { return new Symbol( sym.DOTCOMMA ); }");
            { return new Symbol( sym.DOTCOMMA );
            }
            // fall through
          case 39: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return new Symbol(sym.ID ); }");
            { return new Symbol(sym.ID );
            }
            // fall through
          case 40: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return new Symbol( sym.LV ); }");
            { return new Symbol( sym.LV );
            }
            // fall through
          case 41: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [51] { return new Symbol( sym.RV ); }");
            { return new Symbol( sym.RV );
            }
            // fall through
          case 42: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [45] { yybegin( YYINITIAL ); }");
            { yybegin( YYINITIAL );
            }
            // fall through
          case 43: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [44] { yybegin( COMMENT ); }");
            { yybegin( COMMENT );
            }
            // fall through
          case 44: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return getKW(); }");
            { return getKW();
            }
            // fall through
          case 45: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { return new Symbol( sym.OR ); }");
            { return new Symbol( sym.OR );
            }
            // fall through
          case 46: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [54] { return new Symbol( sym.AND ); }");
            { return new Symbol( sym.AND );
            }
            // fall through
          case 47: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return new Symbol( sym.GREATE ); }");
            { return new Symbol( sym.GREATE );
            }
            // fall through
          case 48: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [62] { return new Symbol( sym.LESSE ); }");
            { return new Symbol( sym.LESSE );
            }
            // fall through
          case 49: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return new Symbol( sym.EQ ); }");
            { return new Symbol( sym.EQ );
            }
            // fall through
          case 50: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] { return new Symbol( sym.LESS ); }");
            { return new Symbol( sym.LESS );
            }
            // fall through
          case 51: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [63] { return new Symbol( sym.GREAT ); }");
            { return new Symbol( sym.GREAT );
            }
            // fall through
          case 52: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return new Symbol( sym.NEQ ); }");
            { return new Symbol( sym.NEQ );
            }
            // fall through
          case 53: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return new Symbol( sym.ASSIGN ); }");
            { return new Symbol( sym.ASSIGN );
            }
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java MPLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        MPLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new MPLexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
