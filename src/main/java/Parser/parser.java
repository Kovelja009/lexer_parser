package Parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import Lexer.MPLexer;
import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\003\010" +
    "\000\002\003\010\000\002\003\010\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\007\007\000\002\011\005\000\002\011\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\006\004\000\002\006\003" +
    "\000\002\013\011\000\002\013\011\000\002\013\011\000" +
    "\002\013\011\000\002\013\011\000\002\013\015\000\002" +
    "\013\015\000\002\013\015\000\002\013\015\000\002\013" +
    "\015\000\002\013\015\000\002\013\015\000\002\013\011" +
    "\000\002\013\011\000\002\013\011\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\007\000\002\013\007\000\002\013\007\000\002\013\007" +
    "\000\002\014\005\000\002\014\003\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\003\000\002" +
    "\016\005\000\002\016\005\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\006\003\004\042\005\001\002\000\006\003" +
    "\271\032\012\001\002\000\006\003\011\032\012\001\002" +
    "\000\004\002\007\001\002\000\004\002\000\001\002\000" +
    "\006\003\266\043\267\001\002\000\006\025\260\043\261" +
    "\001\002\000\006\003\013\025\014\001\002\000\004\026" +
    "\254\001\002\000\006\003\015\026\016\001\002\000\004" +
    "\027\251\001\002\000\006\003\017\027\020\001\002\000" +
    "\034\003\036\033\034\034\024\035\032\036\022\037\037" +
    "\040\041\041\023\044\027\046\035\047\021\050\026\051" +
    "\033\001\002\000\034\003\036\033\034\034\024\035\032" +
    "\036\022\037\037\040\041\041\023\044\027\046\035\047" +
    "\021\050\026\051\033\001\002\000\006\003\245\024\246" +
    "\001\002\000\006\003\uffe5\004\uffe5\001\002\000\004\025" +
    "\233\001\002\000\006\003\uffe7\004\uffe7\001\002\000\036" +
    "\003\ufff4\030\ufff4\033\034\034\024\035\032\036\022\037" +
    "\037\040\041\041\023\044\027\046\035\047\021\050\026" +
    "\051\033\001\002\000\012\003\130\004\072\005\073\025" +
    "\076\001\002\000\006\003\123\025\124\001\002\000\006" +
    "\003\065\004\050\001\002\000\036\003\ufff2\030\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\044\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\001\002\000" +
    "\006\003\uffe6\004\uffe6\001\002\000\006\003\uffe4\004\uffe4" +
    "\001\002\000\006\003\uffe8\004\uffe8\001\002\000\004\024" +
    "\064\001\002\000\036\003\ufff1\030\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\044\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\001\002\000\004\025\057" +
    "\001\002\000\024\003\uffe2\030\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\001\002\000\004" +
    "\025\047\001\002\000\006\003\046\030\045\001\002\000" +
    "\024\003\ufff5\030\ufff5\037\037\040\041\041\023\044\027" +
    "\046\035\047\021\050\026\001\002\000\024\003\uffe3\030" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\044\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\001\002\000\006\003\ufffc\043\ufffc\001\002\000" +
    "\006\003\ufff7\043\ufff7\001\002\000\004\004\050\001\002" +
    "\000\014\003\uffe9\015\uffe9\024\uffe9\026\uffe9\031\uffe9\001" +
    "\002\000\006\026\053\031\052\001\002\000\004\004\056" +
    "\001\002\000\006\003\054\024\055\001\002\000\024\003" +
    "\uffc8\030\uffc8\037\uffc8\040\uffc8\041\uffc8\044\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\001\002\000\024\003\uffc9\030\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\001\002\000\014\003\uffea\015\uffea\024\uffea\026\uffea\031" +
    "\uffea\001\002\000\004\004\050\001\002\000\006\026\061" +
    "\031\052\001\002\000\006\003\062\024\063\001\002\000" +
    "\024\003\uffca\030\uffca\037\uffca\040\uffca\041\uffca\044\uffca" +
    "\046\uffca\047\uffca\050\uffca\001\002\000\024\003\uffcb\030" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\044\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\001\002\000\024\003\uffd2\030\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\001\002" +
    "\000\004\015\120\001\002\000\012\003\067\015\071\024" +
    "\070\031\052\001\002\000\044\003\uffef\004\072\005\073" +
    "\025\076\030\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\044\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\001\002\000\036\003\ufff0\030\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\044\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002\000\010\004" +
    "\072\005\073\025\076\001\002\000\042\003\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\026\uffb2\001\002\000\042\003\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\026\uffb1\001" +
    "\002\000\042\003\uffb7\006\uffb7\007\uffb7\010\uffb7\011\106" +
    "\012\uffb7\013\107\014\105\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\001\002\000\042" +
    "\003\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\026\uffb4\001\002\000\010\004\072\005" +
    "\073\025\076\001\002\000\012\003\101\010\103\012\100" +
    "\024\102\001\002\000\010\004\072\005\073\025\076\001" +
    "\002\000\036\003\uffec\030\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec\046\uffec\047" +
    "\uffec\050\uffec\051\uffec\001\002\000\036\003\uffee\030\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\044\uffee\046\uffee\047\uffee\050\uffee\051\uffee\001\002" +
    "\000\010\004\072\005\073\025\076\001\002\000\042\003" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\106\012\uffb9\013\107" +
    "\014\105\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\026\uffb9\001\002\000\010\004\072\005\073" +
    "\025\076\001\002\000\010\004\072\005\073\025\076\001" +
    "\002\000\010\004\072\005\073\025\076\001\002\000\042" +
    "\003\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\026\uffb5\001\002\000\042\003\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\026\uffb6\001\002\000\042\003\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3" +
    "\001\002\000\042\003\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\106\012\uffb8\013\107\014\105\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8\001\002\000" +
    "\010\010\103\012\100\026\115\001\002\000\042\003\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\026\uffb0\001\002\000\010\010\103\012\100\024" +
    "\117\001\002\000\036\003\uffeb\030\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\044\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\001\002\000\010\004\072" +
    "\005\073\025\076\001\002\000\010\010\103\012\100\024" +
    "\122\001\002\000\036\003\uffed\030\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\044\uffed\046" +
    "\uffed\047\uffed\050\uffed\051\uffed\001\002\000\012\003\130" +
    "\004\072\005\073\025\076\001\002\000\012\003\130\004" +
    "\072\005\073\025\076\001\002\000\024\003\205\010\103" +
    "\012\100\016\204\017\203\020\177\021\200\022\202\023" +
    "\201\001\002\000\014\003\uffc6\006\136\007\uffc6\024\uffc6" +
    "\026\uffc6\001\002\000\010\003\132\007\134\026\133\001" +
    "\002\000\012\003\uffc4\007\uffc4\024\uffc4\026\uffc4\001\002" +
    "\000\014\003\uffc2\006\uffc2\007\uffc2\024\uffc2\026\uffc2\001" +
    "\002\000\012\004\072\005\073\025\076\027\170\001\002" +
    "\000\006\003\140\027\141\001\002\000\010\004\072\005" +
    "\073\025\076\001\002\000\014\003\uffc7\006\136\007\uffc7" +
    "\024\uffc7\026\uffc7\001\002\000\010\004\072\005\073\025" +
    "\076\001\002\000\014\003\uffc3\006\uffc3\007\uffc3\024\uffc3" +
    "\026\uffc3\001\002\000\020\037\037\040\041\041\023\044" +
    "\027\046\035\047\021\050\026\001\002\000\020\037\037" +
    "\040\041\041\023\044\027\046\035\047\021\050\026\001" +
    "\002\000\024\003\143\030\144\037\037\040\041\041\023" +
    "\044\027\046\035\047\021\050\026\001\002\000\026\003" +
    "\uffdd\030\uffdd\037\uffdd\040\uffdd\041\uffdd\044\uffdd\045\155" +
    "\046\uffdd\047\uffdd\050\uffdd\001\002\000\026\003\uffe1\030" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\044\uffe1\045\145\046\uffe1" +
    "\047\uffe1\050\uffe1\001\002\000\006\003\146\027\147\001" +
    "\002\000\020\037\037\040\041\041\023\044\027\046\035" +
    "\047\021\050\026\001\002\000\020\037\037\040\041\041" +
    "\023\044\027\046\035\047\021\050\026\001\002\000\024" +
    "\003\151\030\152\037\037\040\041\041\023\044\027\046" +
    "\035\047\021\050\026\001\002\000\024\003\uffd6\030\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\044\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\001\002\000\024\003\uffdc\030\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\001\002\000" +
    "\022\030\154\037\037\040\041\041\023\044\027\046\035" +
    "\047\021\050\026\001\002\000\024\003\uffd7\030\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\044\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\001\002\000\004\027\156\001\002\000\020\037\037\040" +
    "\041\041\023\044\027\046\035\047\021\050\026\001\002" +
    "\000\022\030\160\037\037\040\041\041\023\044\027\046" +
    "\035\047\021\050\026\001\002\000\024\003\uffd8\030\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\044\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\001\002\000\022\030\162\037\037\040\041\041\023" +
    "\044\027\046\035\047\021\050\026\001\002\000\026\003" +
    "\uffe0\030\uffe0\037\uffe0\040\uffe0\041\uffe0\044\uffe0\045\163" +
    "\046\uffe0\047\uffe0\050\uffe0\001\002\000\004\027\164\001" +
    "\002\000\020\037\037\040\041\041\023\044\027\046\035" +
    "\047\021\050\026\001\002\000\022\030\166\037\037\040" +
    "\041\041\023\044\027\046\035\047\021\050\026\001\002" +
    "\000\024\003\uffd9\030\uffd9\037\uffd9\040\uffd9\041\uffd9\044" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\001\002\000\014\003\uffc5" +
    "\006\136\007\uffc5\024\uffc5\026\uffc5\001\002\000\020\037" +
    "\037\040\041\041\023\044\027\046\035\047\021\050\026" +
    "\001\002\000\022\030\172\037\037\040\041\041\023\044" +
    "\027\046\035\047\021\050\026\001\002\000\026\003\uffde" +
    "\030\uffde\037\uffde\040\uffde\041\uffde\044\uffde\045\173\046" +
    "\uffde\047\uffde\050\uffde\001\002\000\004\027\174\001\002" +
    "\000\020\037\037\040\041\041\023\044\027\046\035\047" +
    "\021\050\026\001\002\000\022\030\176\037\037\040\041" +
    "\041\023\044\027\046\035\047\021\050\026\001\002\000" +
    "\024\003\uffda\030\uffda\037\uffda\040\uffda\041\uffda\044\uffda" +
    "\046\uffda\047\uffda\050\uffda\001\002\000\010\004\uffbd\005" +
    "\uffbd\025\uffbd\001\002\000\010\004\uffbc\005\uffbc\025\uffbc" +
    "\001\002\000\010\004\uffba\005\uffba\025\uffba\001\002\000" +
    "\010\004\uffbb\005\uffbb\025\uffbb\001\002\000\010\004\uffbe" +
    "\005\uffbe\025\uffbe\001\002\000\010\004\uffbf\005\uffbf\025" +
    "\uffbf\001\002\000\010\004\072\005\073\025\076\001\002" +
    "\000\010\004\072\005\073\025\076\001\002\000\020\003" +
    "\uffc1\006\uffc1\007\uffc1\010\103\012\100\024\uffc1\026\uffc1" +
    "\001\002\000\020\003\uffc0\006\uffc0\007\uffc0\010\103\012" +
    "\100\024\uffc0\026\uffc0\001\002\000\010\003\212\007\134" +
    "\026\213\001\002\000\010\004\072\005\073\025\076\001" +
    "\002\000\004\027\214\001\002\000\020\037\037\040\041" +
    "\041\023\044\027\046\035\047\021\050\026\001\002\000" +
    "\022\030\216\037\037\040\041\041\023\044\027\046\035" +
    "\047\021\050\026\001\002\000\026\003\uffdf\030\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\044\uffdf\045\217\046\uffdf\047\uffdf" +
    "\050\uffdf\001\002\000\004\027\220\001\002\000\020\037" +
    "\037\040\041\041\023\044\027\046\035\047\021\050\026" +
    "\001\002\000\022\030\222\037\037\040\041\041\023\044" +
    "\027\046\035\047\021\050\026\001\002\000\024\003\uffdb" +
    "\030\uffdb\037\uffdb\040\uffdb\041\uffdb\044\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\001\002\000\026\003\227\010\103\012\100" +
    "\016\204\017\203\020\177\021\200\022\202\023\201\024" +
    "\230\001\002\000\010\003\225\007\134\024\226\001\002" +
    "\000\032\003\uffce\004\072\005\073\025\076\030\uffce\037" +
    "\uffce\040\uffce\041\uffce\044\uffce\046\uffce\047\uffce\050\uffce" +
    "\001\002\000\024\003\uffcf\030\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002\000\032" +
    "\003\uffcc\004\072\005\073\025\076\030\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002" +
    "\000\024\003\uffcd\030\uffcd\037\uffcd\040\uffcd\041\uffcd\044" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002\000\036\003\ufff3" +
    "\030\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\001\002\000\024\003\ufff6\030\ufff6\037\037\040\041\041" +
    "\023\044\027\046\035\047\021\050\026\001\002\000\012" +
    "\003\130\004\072\005\073\025\076\001\002\000\010\003" +
    "\212\007\134\026\235\001\002\000\006\003\236\027\237" +
    "\001\002\000\020\037\037\040\041\041\023\044\027\046" +
    "\035\047\021\050\026\001\002\000\020\037\037\040\041" +
    "\041\023\044\027\046\035\047\021\050\026\001\002\000" +
    "\024\003\241\030\242\037\037\040\041\041\023\044\027" +
    "\046\035\047\021\050\026\001\002\000\024\003\uffd3\030" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\044\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\001\002\000\024\003\uffd5\030\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\001\002" +
    "\000\022\030\244\037\037\040\041\041\023\044\027\046" +
    "\035\047\021\050\026\001\002\000\024\003\uffd4\030\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\044\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\001\002\000\024\003\uffd0\030\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002\000" +
    "\024\003\uffd1\030\uffd1\037\uffd1\040\uffd1\041\uffd1\044\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\001\002\000\004\030\250\001" +
    "\002\000\006\003\ufff8\043\ufff8\001\002\000\034\003\036" +
    "\033\034\034\024\035\032\036\022\037\037\040\041\041" +
    "\023\044\027\046\035\047\021\050\026\051\033\001\002" +
    "\000\004\030\253\001\002\000\006\003\ufff9\043\ufff9\001" +
    "\002\000\004\027\255\001\002\000\034\003\036\033\034" +
    "\034\024\035\032\036\022\037\037\040\041\041\023\044" +
    "\027\046\035\047\021\050\026\051\033\001\002\000\004" +
    "\030\257\001\002\000\006\003\ufffa\043\ufffa\001\002\000" +
    "\004\026\262\001\002\000\004\002\ufffe\001\002\000\004" +
    "\027\263\001\002\000\034\003\036\033\034\034\024\035" +
    "\032\036\022\037\037\040\041\041\023\044\027\046\035" +
    "\047\021\050\026\051\033\001\002\000\004\030\265\001" +
    "\002\000\006\003\ufffb\043\ufffb\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\001\001\002\000\004\043\272\001" +
    "\002\000\004\025\260\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\002\005\001\001\000\004\003\267\001" +
    "\001\000\004\003\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\246\005\024\006\042\007" +
    "\030\010\027\013\037\001\001\000\016\004\041\005\024" +
    "\006\042\007\030\010\027\013\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\231\007\230\010\027\013\037\001\001\000" +
    "\016\012\222\014\223\015\125\016\130\020\073\021\074" +
    "\001\001\000\002\001\001\000\004\011\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\115\020" +
    "\073\021\074\001\001\000\002\001\001\000\010\012\076" +
    "\020\073\021\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\113" +
    "\020\073\021\074\001\001\000\002\001\001\000\006\020" +
    "\112\021\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\103\021\074\001\001\000\002\001\001\000" +
    "\004\021\111\001\001\000\004\021\110\001\001\000\004" +
    "\021\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\120\020\073\021\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\124\014\210\015\125\016\130\020" +
    "\073\021\074\001\001\000\016\012\124\014\126\015\125" +
    "\016\130\020\073\021\074\001\001\000\004\017\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\124\015\166\016\130\020" +
    "\073\021\074\001\001\000\002\001\001\000\014\012\124" +
    "\015\134\016\130\020\073\021\074\001\001\000\002\001" +
    "\001\000\012\012\124\016\136\020\073\021\074\001\001" +
    "\000\002\001\001\000\006\006\160\013\037\001\001\000" +
    "\006\006\141\013\037\001\001\000\004\013\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\152\013\037\001\001\000\006\006\147\013\037" +
    "\001\001\000\004\013\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\156\013\037\001\001\000" +
    "\004\013\043\001\001\000\002\001\001\000\004\013\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\164\013\037\001\001\000\004\013\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\170\013\037\001" +
    "\001\000\004\013\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\174\013\037\001\001\000\004\013" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\207\020\073\021\074" +
    "\001\001\000\010\012\206\020\073\021\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\124\015\166\016\130\020\073\021\074\001\001\000" +
    "\002\001\001\000\006\006\214\013\037\001\001\000\004" +
    "\013\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\220\013\037\001\001\000\004\013\043\001\001" +
    "\000\002\001\001\000\004\017\205\001\001\000\002\001" +
    "\001\000\014\012\124\015\166\016\130\020\073\021\074" +
    "\001\001\000\002\001\001\000\010\012\207\020\073\021" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\043\001\001\000\016\012\124\014\233\015\125\016" +
    "\130\020\073\021\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\242\013\037\001\001\000\006\006" +
    "\237\013\037\001\001\000\004\013\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\251\005\024\006" +
    "\042\007\030\010\027\013\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\255\005" +
    "\024\006\042\007\030\010\027\013\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\263\005\024\006\042" +
    "\007\030\010\027\013\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public static void main(String[] args)
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
            parser mpParser = new parser( scanner );
		   mpParser.parse();
	  }
	  catch( Exception e )
	  {
		   System.out.println(e.getMessage());
	  }
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= BEGIN CODE END 
            {
              Object RESULT =null;
		
               System.out.println( "Redukcija po smeni 1." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= error CODE END 
            {
              Object RESULT =null;
		
               System.out.println( "Keyword alpha missing.");
               System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= BEGIN error END 
            {
              Object RESULT =null;
		
               System.out.println( "There are no code to execute.");
               System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= BEGIN CODE error 
            {
              Object RESULT =null;
		
               System.out.println( "Keyword omega missing.");
               System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODE ::= in_the_beginning LP RP LV BLOCK RV 
            {
              Object RESULT =null;
		
                System.out.println( "Redukcija po smeni 2." );
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODE ::= error LP RP LV BLOCK RV 
            {
              Object RESULT =null;
		
                 System.out.println( "Keyword in_the_beginning missing." );
                System.out.close();

              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODE ::= in_the_beginning error RP LV BLOCK RV 
            {
              Object RESULT =null;
		
                 System.out.println( "Left parenthesis missing." );
                System.out.close();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CODE ::= in_the_beginning LP error LV BLOCK RV 
            {
              Object RESULT =null;
		
                 System.out.println( "Right parenthesis missing." );
                System.out.close();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CODE ::= in_the_beginning LP RP error BLOCK RV 
            {
              Object RESULT =null;
		
                System.out.println( "Left curly bracket missing." );
                System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CODE ::= in_the_beginning LP RP LV BLOCK error 
            {
              Object RESULT =null;
		
                System.out.println( "Right curly bracket missing." );
                System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOCK ::= VarList StmntList 
            {
              Object RESULT =null;
		
               System.out.println( "Redukcija po smeni 3." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOCK ::= StmntList 
            {
              Object RESULT =null;
		
               System.out.println( "Redukcija po smeni 4." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOCK ::= VarList 
            {
              Object RESULT =null;
		
               System.out.println( "Redukcija po smeni 5." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarList ::= VarList Declare 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 6." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarList ::= Declare 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 7." );

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarList ::= error 
            {
              Object RESULT =null;
		
                   System.out.println( "There are no variables to declare." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Declare ::= Type NameList DOTCOMMA 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 8." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declare ::= Type NameList error 
            {
              Object RESULT =null;
		
                   System.out.println( "Semicolon missing." );
                   System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Declare ::= Type NameList ASSIGN ArgExpression DOTCOMMA 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 9." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Declare ::= Type error ASSIGN ArgExpression DOTCOMMA 
            {
              Object RESULT =null;
		
                   System.out.println( "Name missing." );
                   System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Declare ::= Type NameList ASSIGN ArgExpression error 
            {
              Object RESULT =null;
		
                   System.out.println( "Semicolon missing." );
                   System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Declare ::= Type NameList error ArgExpression DOTCOMMA 
            {
              Object RESULT =null;
		
                   System.out.println( "Assignment missing." );
                   System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NameList ::= NameList COMMA ID 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 10." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NameList ::= ID 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 11." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= real 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 12." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= _int 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 13." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= _char 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 14." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= _bool 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 15." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= STRING 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 16." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StmntList ::= StmntList Statement 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 17." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmntList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StmntList ::= Statement 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 18." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmntList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= IF LP Expression RP LV StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 19." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= IF LP Expression RP error StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Left curly bracket missing." );
                     System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= IF error Expression RP LV StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Left parenthesis missing." );
                     System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= IF LP Expression error LV StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Right parenthesis missing." );
                     System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= IF LP Expression RP LV StmntList error 
            {
              Object RESULT =null;
		
                   System.out.println( "Right curly bracket missing." );
                     System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= IF LP Expression RP LV StmntList RV ELSE LV StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 20." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= IF error Expression RP LV StmntList RV ELSE LV StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Left parenthesis missing." );
                     System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= IF LP Expression error LV StmntList RV ELSE LV StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Right parenthesis missing." );
                     System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= IF LP Expression RP error StmntList RV ELSE LV StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Left curly bracket missing." );
                     System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= IF LP Expression RP LV StmntList error ELSE LV StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Right curly bracket missing." );
                     System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= IF LP Expression RP LV StmntList RV ELSE error StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Left curly bracket missing." );
                     System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= IF LP Expression RP LV StmntList RV ELSE LV StmntList error 
            {
              Object RESULT =null;
		
                   System.out.println( "Right curly bracket missing." );
                     System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= _while LP Expression RP LV StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 21." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= _while LP Expression RP error StmntList RV 
            {
              Object RESULT =null;
		
                   System.out.println( "Left curly bracket missing." );
                    System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= _while LP Expression RP LV StmntList error 
            {
              Object RESULT =null;
		
                   System.out.println( "Right curly bracket missing." );
                    System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= BREAK DOTCOMMA 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 22." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= CONTINUE DOTCOMMA 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 23." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= CONTINUE error 
            {
              Object RESULT =null;
		
                   System.out.println( "Missing ';'" );
                    System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= RETURN Expression DOTCOMMA 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 24." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= RETURN Expression error 
            {
              Object RESULT =null;
		
                   System.out.println( "Missing ';'");
                    System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= RETURN ArgExpression DOTCOMMA 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 25." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= RETURN ArgExpression error 
            {
              Object RESULT =null;
		
                   System.out.println( "Missing ';'" );
                    System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= read LP NameList RP DOTCOMMA 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 26." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= read LP NameList RP error 
            {
              Object RESULT =null;
		
                   System.out.println( "Missing ';'" );
                    System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= write LP NameList RP DOTCOMMA 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 28." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= write LP NameList RP error 
            {
              Object RESULT =null;
		
                   System.out.println( "Missing ';'" );
                    System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 29." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expression ::= AndExpression 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 30." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expression ::= Expression error AndExpression 
            {
              Object RESULT =null;
		
                   System.out.println( "Missing 'or'" );
                    System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expression ::= error 
            {
              Object RESULT =null;
		
                   System.out.println( "Invalid expression" );
                    System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AndExpression ::= AndExpression AND Relation 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 31." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AndExpression ::= Relation 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 32." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Relation ::= ArgExpression CHECK ArgExpression 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 33." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Relation ::= ArgExpression error ArgExpression 
            {
              Object RESULT =null;
		
                   System.out.println( "Missing checking" );
                    System.out.close();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CHECK ::= LESS 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 34." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHECK",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CHECK ::= LESSE 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 35." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHECK",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CHECK ::= GREAT 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 36." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHECK",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CHECK ::= GREATE 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 37." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHECK",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CHECK ::= EQ 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 38." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHECK",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CHECK ::= NEQ 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 39." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CHECK",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArgExpression ::= ArgExpression PLUS Term 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 40." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgExpression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ArgExpression ::= ArgExpression MIN Term 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 41." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgExpression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ArgExpression ::= Term 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 42." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgExpression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Term ::= Term MUL Factor 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 43." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Term ::= Term DIV Factor 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 44." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Term ::= Factor 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 45." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Term ::= Term MOD Factor 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 46." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Factor ::= ID 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 47." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Factor ::= CONST 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 48." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Factor ::= LP ArgExpression RP 
            {
              Object RESULT =null;
		
                   System.out.println( "Redukcija po smeni 49." );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
